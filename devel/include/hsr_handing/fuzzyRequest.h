// Generated by gencpp from file hsr_handing/fuzzyRequest.msg
// DO NOT EDIT!


#ifndef HSR_HANDING_MESSAGE_FUZZYREQUEST_H
#define HSR_HANDING_MESSAGE_FUZZYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hsr_handing
{
template <class ContainerAllocator>
struct fuzzyRequest_
{
  typedef fuzzyRequest_<ContainerAllocator> Type;

  fuzzyRequest_()
    : fy(0.0)
    , fz(0.0)
    , old_fy(0.0)
    , old_fz(0.0)  {
    }
  fuzzyRequest_(const ContainerAllocator& _alloc)
    : fy(0.0)
    , fz(0.0)
    , old_fy(0.0)
    , old_fz(0.0)  {
  (void)_alloc;
    }



   typedef double _fy_type;
  _fy_type fy;

   typedef double _fz_type;
  _fz_type fz;

   typedef double _old_fy_type;
  _old_fy_type old_fy;

   typedef double _old_fz_type;
  _old_fz_type old_fz;





  typedef boost::shared_ptr< ::hsr_handing::fuzzyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hsr_handing::fuzzyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct fuzzyRequest_

typedef ::hsr_handing::fuzzyRequest_<std::allocator<void> > fuzzyRequest;

typedef boost::shared_ptr< ::hsr_handing::fuzzyRequest > fuzzyRequestPtr;
typedef boost::shared_ptr< ::hsr_handing::fuzzyRequest const> fuzzyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hsr_handing::fuzzyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hsr_handing

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'hsr_handing': ['/home/naoyamada/CW/catkin_ws3/src/hsr_handing/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hsr_handing::fuzzyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hsr_handing::fuzzyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hsr_handing::fuzzyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4092824968e99178240b7f45104d4572";
  }

  static const char* value(const ::hsr_handing::fuzzyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4092824968e99178ULL;
  static const uint64_t static_value2 = 0x240b7f45104d4572ULL;
};

template<class ContainerAllocator>
struct DataType< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hsr_handing/fuzzyRequest";
  }

  static const char* value(const ::hsr_handing::fuzzyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 fy\n\
float64 fz\n\
float64 old_fy\n\
float64 old_fz\n\
";
  }

  static const char* value(const ::hsr_handing::fuzzyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fy);
      stream.next(m.fz);
      stream.next(m.old_fy);
      stream.next(m.old_fz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fuzzyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hsr_handing::fuzzyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hsr_handing::fuzzyRequest_<ContainerAllocator>& v)
  {
    s << indent << "fy: ";
    Printer<double>::stream(s, indent + "  ", v.fy);
    s << indent << "fz: ";
    Printer<double>::stream(s, indent + "  ", v.fz);
    s << indent << "old_fy: ";
    Printer<double>::stream(s, indent + "  ", v.old_fy);
    s << indent << "old_fz: ";
    Printer<double>::stream(s, indent + "  ", v.old_fz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HSR_HANDING_MESSAGE_FUZZYREQUEST_H
